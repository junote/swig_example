// Helper function to convert a Python sequence to a UINT32 array
%{
static int convert_uint_array(PyObject *input, unsigned int *ptr, int size) {
  int i;
  if (!PySequence_Check(input)) {
      PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
      return 0;
  }
  if (PyObject_Length(input) != size) {
      PyErr_SetString(PyExc_ValueError,"Sequence size mismatch");
      return 0;
  }
  for (i =0; i < size; i++) {
      PyObject *o = PySequence_GetItem(input,i);
      if (!PyInt_Check(o)) {
         Py_XDECREF(o);
         PyErr_SetString(PyExc_ValueError,"Expecting a sequence of integers");
         return 0;
      }
      ptr[i] = PyLong_AsLong(o);
      Py_DECREF(o);
  }
  return 1;
}
%}

// Helper function to convert a Python sequence to a UINT8 array

%{
static int convert_char_array(PyObject *input, unsigned char *ptr, int size) {
  int i;
  if (!PySequence_Check(input)) {
      PyErr_SetString(PyExc_TypeError,"Expecting a sequence");
      return 0;
  }
  if (PyObject_Length(input) != size) {
      PyErr_SetString(PyExc_ValueError,"Sequence size mismatch");
      return 0;
  }
  for (i =0; i < size; i++) {
      PyObject *o = PySequence_GetItem(input,i);
      if (!PyInt_Check(o)) {
         Py_XDECREF(o);
         PyErr_SetString(PyExc_ValueError,"Expecting a sequence of integers");
         return 0;
      }
      // Need to type-cast the Python int to a UINT8 (unsigned char)
      unsigned int val = PyLong_AsLong(o);
      ptr[i] = (unsigned char) val;
      Py_DECREF(o);
  }
  return 1;
}
%}


// Typemaps for converting C arrays to Python sequences and vice-versa
//  reference: http://www.swig.org/Doc3.0/Typemaps.html#Typemaps_nn39
//   void set_array(int input[3])
//   >>> example.set_array([15,15,11])

%typemap(in) UINT32[ANY] (UINT32 temp[$1_dim0])
{
    if (!convert_uint_array($input,temp,$1_dim0)) {
      return NULL;
   }
   $1 = ($1_basetype *)temp;
}

%typemap(in) UINT8[ANY] (UINT8 temp[$1_dim0])
{
    unsigned char *tempc = (unsigned char *) temp;
    if (!convert_char_array($input,tempc,$1_dim0)) {
      return NULL;
   }
   $1 = ($1_basetype *)temp;
}

%typemap(in) UINT32[ANY][ANY] (UINT32 temp[$1_dim0][$1_dim1])
{
    int i;
    for (i=0; i < $1_dim0; i++)
    {
        PyObject *sublist = PySequence_GetItem($input, i);
        if (!convert_uint_array(sublist, temp[i], $1_dim1)) {
            return NULL;
        }
    }
    $1_basetype (*tempout)[$1_dim1] = ($1_basetype (*)[$1_dim1]) temp;
    $1 = tempout;
}

%typemap(in) UINT8[ANY][ANY] (UINT8 temp[$1_dim0][$1_dim1])
{
    int i;
    for (i=0; i < $1_dim0; i++)
    {
        unsigned char *tempc = (unsigned char *) temp[i];
        PyObject *sublist = PySequence_GetItem($input, i);
        if (!convert_char_array(sublist, tempc, $1_dim1)) {
            return NULL;
        }
    }
    $1_basetype (*tempout)[$1_dim1] = ($1_basetype (*)[$1_dim1]) temp;
    $1 = tempout;
}

%typemap(in) UINT32[ANY][ANY][ANY] (UINT32 temp[$1_dim0][$1_dim1][$1_dim2])
{
    int i;
    int k;
    for (i=0; i < $1_dim0; i++)
    {
        PyObject *sublist = PySequence_GetItem($input, i);
        for (k=0; k < $1_dim1; k++)
        {
            PyObject *subsublist = PySequence_GetItem($input, k);
            if (!convert_uint_array(subsublist, temp[i][k], $1_dim2)) {
                return NULL;
            }
        }
    }
    $1_basetype (*tempout)[$1_dim1][$1_dim2] = ($1_basetype (*)[$1_dim1][$1_dim2]) temp;
    $1 = tempout;
}

%typemap(in) UINT8[ANY][ANY][ANY] (UINT8 temp[$1_dim0][$1_dim1][$1_dim2])
{
    int i;
    int k;
    for (i=0; i < $1_dim0; i++)
    {
        PyObject *sublist = PySequence_GetItem($input, i);
        for (k=0; k < $1_dim1; k++)
        {
            PyObject *subsublist = PySequence_GetItem($input, k);
            unsigned char *tempc = (unsigned char *) temp[i][k];
            if (!convert_char_array(subsublist, tempc, $1_dim2)) {
                return NULL;
            }
        }
    }
    $1_basetype (*tempout)[$1_dim1][$1_dim2] = ($1_basetype (*)[$1_dim1][$1_dim2]) temp;
    $1 = tempout;
}

%typemap(out) UINT32[ANY], UINT8[ANY]
{
  int i;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
    PyObject *o = PyLong_FromUnsignedLong($1[i]);
    PyList_SetItem($result, i, o);
  }
}

%typemap(out) UINT32[ANY][ANY], UINT8[ANY][ANY]
{
  int i;
  int k;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
  PyObject *sublist = PyList_New($1_dim1);
    for (k = 0; k < $1_dim1; k++) {
      PyObject *o = PyLong_FromUnsignedLong($1[i][k]);
      PyList_SetItem(sublist, k, o);
    }
    PyList_SetItem($result, i, sublist);
  }
}

%typemap(out) UINT32[ANY][ANY][ANY], UINT8[ANY][ANY][ANY]
{
  int i;
  int j;
  int k;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
  PyObject *sublist = PyList_New($1_dim1);
    for (j = 0; j < $1_dim1; j++) {
    PyObject *subsublist = PyList_New($1_dim2);
      for (k = 0; k < $1_dim2; k++) {
        PyObject *o = PyLong_FromUnsignedLong($1[i][j][k]);
        PyList_SetItem(subsublist, k, o);
      }
      PyList_SetItem(sublist, j, subsublist);
    }
    PyList_SetItem($result, i, sublist);
  }
}

%typemap(out) BOOL32, BOOL8
{
    $result = PyBool_FromLong($1);
}

%typemap(out) BOOL32[ANY], BOOL8[ANY]
{
  int i;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
    PyObject *o = PyBool_FromLong($1[i]);
    PyList_SetItem($result, i, o);
  }
}

%typemap(out) BOOL32[ANY][ANY], BOOL8[ANY][ANY]
{
  int i;
  int k;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
  PyObject *sublist = PyList_New($1_dim1);
    for (k = 0; k < $1_dim1; k++) {
      PyObject *o = PyBool_FromLong($1[i][k]);
      PyList_SetItem(sublist, k, o);
    }
    PyList_SetItem($result, i, sublist);
  }
}

%typemap(out) BOOL32[ANY][ANY][ANY], BOOL8[ANY][ANY][ANY]
{
  int i;
  int j;
  int k;
  $result = PyList_New($1_dim0);
  for (i = 0; i < $1_dim0; i++) {
  PyObject *sublist = PyList_New($1_dim1);
    for (j = 0; j < $1_dim1; j++) {
    PyObject *subsublist = PyList_New($1_dim2);
      for (k = 0; k < $1_dim2; k++) {
        PyObject *o = PyBool_FromLong($1[i][j][k]);
        PyList_SetItem(subsublist, k, o);
      }
      PyList_SetItem(sublist, j, subsublist);
    }
    PyList_SetItem($result, i, sublist);
  }
}